1. Reasearching blocking vs non-blocking i/o model
2. working with node modules and 3rd party modules using require
3. Looking at global npm package nodemon
4. looking at the command line tool yargs for parsing
5. debuging command - node inspect / nodemon inspect
    a. list(10) - lines to show
    b. n - new line to run
    c. c - continue
    d. repl - reavaluate print loop (ctr c to go back to debug mode)
    e. debugger

    with chrome
    node --inspect-brk
    chrome://inspect/#devices



node app.js add (third argument)

MongoDB

- Nosql database used to persist information
- c:\Program Files\MongoDB\Server\3.6\
    - mongod.exe --dbpath /Users/Paul/mongo-data
    - mongo.exe (bash) 
- install robomongo
- Nosql Vocab
    - uses collections instead of table
    - uses field instead of column
    - uses document instaed of row/record

- update operators
    - $inc - increaments a fields value
    - $set - set value


Mongoose ORM
- 
------------------------------------------------

Postman Environments

name - Todo Local
key - url 
value - localhost:3000
{{url}}/todos

Environemnst

'test' | 'developement' | 'production'


Tuesday 

connecting, inserting, deleting and updating documents collections in mongodb - 3
building a notes api - installed mongoose for validators, types and default object modeling. Added bodyParser for middleware to pass jSON in express routes - 2
building a notes api - added GET, POST methods to added/retrieve todos using expressjs and mongoose, and integrated unit tests for each. - 3

Wednesday

building a notes api - added DELETE, PATCH methods to delete/update todos using expressjs and mongoose, and integrated unit tests for each - 3
building a notes api - creating a test database using node environment variables - 2